<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion> <!-- Spring Legacy 프로젝트 (4버전대) -->

	<!-- 변경해야 하는 부분 -->
	<groupId>com.kh</groupId> <!-- 2 레벨의 기본 패키지 구조 -->
	<artifactId>dplate</artifactId> <!-- 3 레벨의 패키지명 (즉, 프로그램명) -->
	<name>Dplate</name> <!-- 프로젝트명 -->

	<packaging>war</packaging> <!-- 배포될 때 압축될 형식 (jar : 컴파일 된 클래스들을 압축한 라이브러리, 일반 프로그램의 압축 형식 / war : web 프로그램의 압축 형식 ) -->
	<version>1.0.0-BUILD-SNAPSHOT</version> <!-- 프로젝트 현재 버전, SNAPSHOT은 메이븐의 예약어이다  -->
	
	<!-- 
		* properties
		이 문서에서 사용할 환경설정 내용들을 담은 변수
		속성을 key+value 세트로 저장하겠다 
		변수처럼 key 이름을 가지고 값을 불러오겠다 
		key == 태그명 == 변수명
	-->
	<properties>
		<java-version>1.8</java-version> <!-- 자바 버전 : 1.8 로 수정 -->
		<org.springframework-version>4.3.30.RELEASE</org.springframework-version> <!-- 4.3.30.RELEASE 까지가 Spring Lagacy / 5.0.0.RELEASE 부터는 Boot Dashboard -->
		<org.aspectj-version>1.6.10</org.aspectj-version> 
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>
	
	<!--  
		* dependency
		의존성 라이브러리
		내가 이 프로젝트에서 사용할 라이브러리의 정보가 담김
		파일을 직접 다운로드 받는게 아니라 파일의 정보만 제시하고 알아서 '주입(injection)'시켜주는 것 
		cf) 의존성 주입(di : dependency injection)
		
		-> 내 입맛대로 dependency 추가, 수정, 삭제가 가능하다 
	-->
	<dependencies> 
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version> <!-- EL은 아님, 띄어쓰기 하면 적용X -->
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
				
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
				
		<!-- Servlet -->
		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId>
		    <version>4.0.1</version> <!-- servlet 버전 : 4.0.1 로 수정 -->
		    <scope>provided</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api -->
		<dependency>
		    <groupId>javax.servlet.jsp</groupId>
		    <artifactId>javax.servlet.jsp-api</artifactId>
		    <version>2.3.3</version> <!-- jsp 버전 : 2.3.3 으로 수정 -->
		    <scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	
		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<scope>test</scope>
		</dependency>        
	
		<!-- JDBC 관련 -->
		<!-- OJDBC.JAR 파일 추가 -->
		<!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc6 -->
		<dependency>
		    <groupId>com.oracle.database.jdbc</groupId>
		    <artifactId>ojdbc6</artifactId>
		    <version>11.2.0.4</version>
		</dependency>
		
		<!-- Spring 에서 제공하는 JDBC 를 수행하기 위해 필요한 의존성 라이브러리 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		
		<!-- MyBatis 관련 -->
		<!-- MyBatis 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.5.8</version>
		</dependency>
		
		<!-- MyBatis Spring 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>2.0.6</version>
		</dependency>
		
		<!-- Lombok 라이브러리 : 자동 코드 생성 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
		<dependency>
		    <groupId>org.projectlombok</groupId>
		    <artifactId>lombok</artifactId>
		    <version>1.18.22</version>
		    <scope>provided</scope>
		</dependency>
		
		<!-- 파일 업로드를 위한 라이브러리 -->
		<!-- 실질적인 파일 업로드를 위한 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
		<dependency>
		    <groupId>commons-fileupload</groupId>
		    <artifactId>commons-fileupload</artifactId>
		    <version>1.4</version>
		</dependency>
		<!-- 파일을 제어하는 기능을 수행해주는 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
		    <groupId>commons-io</groupId>
		    <artifactId>commons-io</artifactId>
		    <version>2.11.0</version>
		</dependency>
		
		<!-- 비동기통신을 위한 라이브러리 -->
		<!-- 
			jackson-databind : 자바에서 JSON 관련 처리를 수행하는 모듈 
							       라이브러리만 추가하면 됨 
							       도구를 추가할 필요가 없다
		-->
		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
		<dependency>
		    <groupId>com.fasterxml.jackson.core</groupId>
		    <artifactId>jackson-databind</artifactId>
		    <version>2.13.1</version>
		</dependency>
		
		<!-- 메일 -->
		<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context-support</artifactId>
		<version>${org.springframework-version}</version>
		</dependency>
		<dependency>
		<groupId>javax.mail</groupId>
		<artifactId>mail</artifactId>
		<version>1.4.7</version>
		</dependency>
		
	</dependencies>
	
	<!-- 
		* build
		실제 명령 수행 시 필요한 설정
		이 명령을 실행할 때 누가 어떻게 명령울 실행할건지 정의해 놓은 곳
	-->
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>${java-version}</source> <!-- 자바 버전 값과 동일하게 작성되게 해주기 (java-version) -->
                    <target>${java-version}</target> 
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

<!--
	Maven 프레임워크를 사용하기 위한 파일 -> pom.xml
	
	* Maven
	빌드 자동화 프레임워크
	
	* pom.xml
	추가할 라이브러리 정보를 작성하는 가장 핵심적인 파일
	
	* Maven Dependencies 폴더
	 라이브러리들이 모여있는 폴더
-->










